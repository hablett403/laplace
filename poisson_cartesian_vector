import numpy as np

def poisson_cartesian_vector(bx, by, bz, x, y, z, hx, hy, hz):
    '''
    Solves the (vector) form of the Poisson equation in 3D Cartesian coordinates, $\nabla^2 u = h$, using finite differences. A full derivation 
    can be found in the supporting PDF document.
    
    Call signature:
    
    poisson_cartesian_vector(bx, by, bz, x, y, z, hx, hy, hz)
    
    Arguments:
    bx, by, bz: 3D ndarrays containing boundary conditions on exterior points for each component.
                If the interior points are non-zero, the solution may not be correct.
    x, y, z:    1D coordinate arrays. These are only used to calculate grid spacing.
    hx, hy, hz: 3D ndarrays representing the components of the known function h. 
    '''
    
    h = x[1] - x[0]
    h_prime = y[1] - y[0]
    h_doubleprime = z[1] - z[0]
    m = 1/(2 * 1/(h**2) + 2 * 1/(h_prime**2) + 2 * 1/(h_doubleprime**2))
    
    ux = bx
    uy = by
    uz = bz
    iteration = 0
    while iteration < 1000:
        iteration += 1
        Aux = ux.copy()
        Aux = m * (
                    1/h**2 * (np.roll(ux, -1, 0) + np.roll(ux, 1, 0)) 
                    + 1/h_prime**2 * (np.roll(ux, -1, 1) + np.roll(ux, 1, 1))
                    + 1/h_doubleprime**2 * (np.roll(ux, -1, 2) + np.roll(ux, 1, 2))
                    - hx
                    )
        ux[1:-1, 1:-1, 1:-1] = Aux[1:-1,1:-1, 1:-1]
        
        Auy = uy.copy()
        Auy = m * (
                    1/h**2 * (np.roll(uy, -1, 0) + np.roll(uy, 1, 0)) 
                    + 1/h_prime**2 * (np.roll(uy, -1, 1) + np.roll(uy, 1, 1))
                    + 1/h_doubleprime**2 * (np.roll(uy, -1, 2) + np.roll(uy, 1, 2))
                    -hy
                    )
        uy[1:-1, 1:-1, 1:-1] = Auy[1:-1,1:-1, 1:-1]
        
        Auz = uz.copy()
        Auz = m * (
                    1/h**2 * (np.roll(uz, -1, 0) + np.roll(uz, 1, 0)) 
                    + 1/h_prime**2 * (np.roll(uz, -1, 1) + np.roll(uz, 1, 1))
                    + 1/h_doubleprime**2 * (np.roll(uz, -1, 2) + np.roll(uz, 1, 2))
                    -hz
                    )
        uz[1:-1, 1:-1, 1:-1] = Auz[1:-1,1:-1, 1:-1]
        
        

    return ux, uy, uz
