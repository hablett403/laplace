#contains functions to solve both the scalar and vector form of the Poisson equation in spherical coordinates.
#See PDF for details of derivation of results.

def poisson_spherical_vector(br, btheta, bphi, r, theta, phi, hr, htheta, hphi):
    '''
    Solve the vector form of the Poisson equation, $\nabla^2 u = h$, in spherical coordinates using finite differences.
    See PDF for derivation.
    
    Call signature:
    
    poisson_spherical_vector(br, btheta, bphi, r, theta, phi, hr, htheta, hphi)
    
    Arguments:
    
    br, btheta, bphi: 3D ndarrays containing boundary conditions on exterior points. If the interior points are non-zero, the
              solution may not be correct. 0th index corresponds to smallest radis; theta increases as index increases.
              
    r, theta, phi: 1D coordinate arrays of r, theta and phi where the convention is taken that theta ranges from 0 to pi, phi
                   ranges from 0 to 2pi. Note that singularities arise in the equation when theta = 0. This may produce 
                   unintended results. 
    hr, htheta, hphi: ndarrays in the same shape as br, btheta, bphi which represent the components of the known function h. 
    '''
    
    theta_matrix, radius_matrix, phi_matrix = np.meshgrid(theta, r, phi)
    h = r[1] - r[0]
    h_prime = theta[1] - theta[0]
    h_doubleprime = phi[1] - phi[0]
    
    fraction_r = 1/( 
                    2 * (1/h**2 + 1/(h_prime * radius_matrix)**2
                          + 1/(h_doubleprime * radius_matrix + np.sin(theta_matrix))**2 + 1/radius_matrix**2)
                   )
    
    fraction_theta = 1/(
                        2 * (1/h**2 + 1/(h_prime * radius_matrix)**2 + 1/(h_doubleprime * radius_matrix * np.sin(theta_matrix))**2
                        + 1/(radius_matrix * np.sin(theta_matrix))**2)
                        )
    
    fraction_phi = fraction_theta
        
    def pre(C):
        return (
                1/(h * radius_matrix) * (np.roll(C, -1, 0) - np.roll(C, 1, 0)) 
                + 1/h**2 * (np.roll(C, -1, 0) + np.roll(C, 1, 0))
                + 1/(h_prime * radius_matrix)**2 * (np.roll(C, -1, 1) + np.roll(C, 1, 1))
                + 1/(h_doubleprime * radius_matrix * np.sin(theta_matrix))**2 * (np.roll(C, -1, 2) + np.roll(C, 1, 2))
                + 1/(2 * h_prime * radius_matrix**2 * np.tan(theta_matrix)) * (np.roll(C, -1, 1) + np.roll(C, 1, 1))
                )
    
    
    
    iteration = 0
    while iteration <= 200:
        iteration += 1
        R = br.copy()
        Theta = btheta.copy()
        Phi = bphi.copy()
    
        R = fraction_r * (
                           pre(R)
                          - 1/(h_prime * radius_matrix**2) * (np.roll(Theta, -1, 1) - np.roll(Theta, 1, 1))
                          - 1/(h_doubleprime * radius_matrix**2 * np.sin(theta_matrix)) * (np.roll(Phi, -1, 1) - np.roll(Phi, 1, 1))
                          - 2/(radius_matrix**2 * np.tan(theta_matrix)) * Theta
                          - hr
                          )
        
        Theta = fraction_theta * (
                                  pre(Theta)
                                  - 1/(np.tan(theta_matrix) * h_doubleprime * radius_matrix**2 * np.sin(theta_matrix)) * (np.roll(Phi, -1, 2) - np.roll(Phi, 1, 2))
                                  + 1/(radius_matrix**2 * h_prime) * (np.roll(R, -1, 1) - np.roll(R, 1, 1))
                                  - htheta
                                 )
        
        Phi = fraction_phi * (
                              pre(Phi)
                              - 1/(h_doubleprime * radius_matrix**2 * np.sin(theta_matrix)) * (np.roll(R,-1,2)-np.roll(R,1,2))
                              + 1/(np.tan(theta_matrix) * radius_matrix**2 * h_doubleprime * np.sin(theta_matrix)) * (np.roll(Theta, -1, 1) - np.roll(Theta, 1, 1))
                              - hphi
                             )
    
        br[1:-1,:,:] = R[1:-1,:,:]
        btheta[:,1:-1,:] = Theta[:,1:-1,:]
        bphi[:,1:-1,:] = Phi[:,1:-1,:]
        
    return R, Theta, Phi
