import numpy as np


def laplace_cartesian_scalar(bc, x, y, z):
    '''
    Solve the (scalar) Laplace equation in Cartesian coordinates in 3 dimensions using finite differences. A full derivation 
    can be found in the supporting PDF document. 
    
    Call signature:
    
    laplace_cartesian_scalar(bc, x, y, z)
    
    Arguments:
    bc: 3D ndarray containing boundary conditions on exterior point. If the interior points are non-zero, the
        solution may not be correct.
    x, y, z: 1D coordinate arrays. These are only used to calculate grid spacing. 
    
    '''
    h = x[1] - x[0]
    h_prime = y[1] - y[0]
    h_doubleprime = z[1] - z[0]
    m = 1/(2/h**2 + 2/h_prime**2 + 2/h_doubleprime**2)
    
    u = bc
    iteration = 0
    while iteration < 1000:
        iteration += 1
        Au = u.copy()
        Au = m * (
                      1/h**2 * (np.roll(u, -1, 0) + np.roll(u, 1, 0)) 
                    + 1/h_prime**2 * (np.roll(u, -1, 1) + np.roll(u, 1, 1))
                    + 1/h_doubleprime**2 * (np.roll(u, -1, 2) + np.roll(u, 1, 2))
                    )
        u[1:-1, 1:-1, 1:-1] = Au[1:-1,1:-1, 1:-1]

    return u
    
    
def laplace_cartesian_vector(bx, by, bz, x, y, z):
    '''
    Solve the vector form of the Laplace equation in Cartesian coordinates in 3 dimensions using finite differences. 
    This function simply applies the scalar function to the three components. A full derivation 
    can be found in the supporting PDF document.
    
    Call signature:
    
    laplace_cartesian_vector(bx, by, bz, x, y, z)
    
    Arguments:
    bx, by, bz:  3D ndarrays containing boundary conditions on exterior points for each component.
                 If the interior points are non-zero, the solution may not be correct
    x, y, z: 1D coordinate arrays. These are only used to calculate grid spacing.
    
    
    '''
    return (laplace_cartesian_scalar(bx, x, y, z), laplace_cartesian_scalar(by, x, y, z),
            laplace_cartesian_scalar(bz, x, y, z))
